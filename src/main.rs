#[allow(unused)]
mod app;
mod colour_output;
mod progress_indicator;
use anyhow::{Error, Result};
use app::{
    cmd::{self, Action},
    creds, Config,
};
use clap::{Parser, Subcommand};
use colour_output::{ColourOutput, StreamKind, Style};
use cvcap::CheckvistError;
use env_logger::Env;
use log::{error, info};

// Logging.
// Convention: reserve trace and debug levels for libraries (eg. checkvist api)
// Levels used in executable:
// - error: any non-recoverable error (eg. inability to parse config toml)
// - warn: recoverable errors
// - info: transient info for debugging

// Exit codes
// 0 - success
// 1 - any error generated by cvcap
// 2 - clap parsing errors

const BANNER: &str = r"                           
  _   _   _   _   _  
 / \ / \ / \ / \ / \ 
( c | v | c | a | p )
 \_/ \_/ \_/ \_/ \_/ 
                              

";

#[derive(Parser, Debug)]
#[clap(version, name=BANNER, about = "A minimal cli capture tool for Checkvist (https://checkvist.com)")]
#[clap(arg_required_else_help = true, subcommand_negates_reqs = true)]
struct Cli {
    /// The task content to capture
    #[clap(name = "task content", value_name = "TASK")]
    task: Option<String>,
    #[clap(subcommand)]
    subcommand: Option<Command>,
    /// Enable verbose logging. In case of trouble
    #[clap(short = 'v', long = "verbose", global = true)]
    verbose: bool,
    /// Reduces output, and requires no interaction
    ///
    #[clap(short = 'q', long = "quiet", global = true, conflicts_with = "verbose")]
    quiet: bool,
}

#[derive(Subcommand, Debug)]
enum Command {
    /// Capture a task from commandline, clipboard, or stdin
    Add(cmd::Add),
    /// Check whether cvcap is logged in, and if it has a default list set
    #[clap(name = "status")]
    ShowStatus(cmd::ShowStatus),
    /// Removes all login data for the logged in user
    #[clap(name = "logout")]
    LogOut(cmd::LogOut),
}

impl Command {
    // Create a default add command, with a content string and no options.
    // Can't  use std::default as we need the arg
    fn default(task_content: &str) -> Self {
        Self::Add(cmd::Add::new(task_content))
    }
}

impl cmd::Action for Command {
    fn run(self, context: app::Context) -> Result<cmd::RunType> {
        match self {
            Command::Add(add) => add.run(context),
            Command::ShowStatus(cmd) => cmd.run(context),
            Command::LogOut(cmd) => cmd.run(context),
        }
    }
}

fn main() {
    let cli = Cli::parse();
    let context = app::Context {
        config: Config::read_from_file(),
        api_token: creds::get_api_token_from_keyring(),
        run_interactively: !cli.quiet,
    };

    let log_level = if cli.verbose { "DEBUG" } else { "OFF" };
    env_logger::Builder::from_env(Env::default().default_filter_or(log_level)).init();

    // if no subcommand is provided, create a default 'add', with task content from first arg
    match cli
        .subcommand
        .unwrap_or_else(|| Command::default(&cli.task.expect("Arguments error")))
        .run(context)
    {
        Err(err) => {
            error!("Fatal error. Cause: {:?}", err.root_cause());
            handle_error(err, cli.quiet);
        }
        Ok(cmd::RunType::Completed) => (),
        Ok(cmd::RunType::Cancelled) => println!("Cancelled"),
    }
    std::process::exit(0);
}

fn handle_error(err: Error, is_quiet: bool) {
    // This is pretty hacky. Downcast the concrete error types
    // requiring specific handling
    match err.root_cause().downcast_ref::<CheckvistError>() {
        Some(CheckvistError::TokenRefreshFailedError) => {
            eprint_logged_out(is_quiet);
            match creds::delete_api_token() {
                Err(err) => error!("Something went wrong deleting invalid api token: {}", err),
                _ => info!("Expired api token was deleted"),
            }
        }
        // other checkvist error variants, or other error types
        _possible_app_error => match err.root_cause().downcast_ref::<app::Error>() {
            Some(app::Error::MissingPipe) => {
                eprint_nopipe_error(is_quiet);
            }
            //
            _all_other_errors => eprint_error(err, is_quiet),
        },
    }
    std::process::exit(1);
}

#[inline(always)]
// haven't so far found a way to get clap to do this
fn eprint_nopipe_error(is_quiet: bool) {
    if is_quiet {
        return;
    }

    // this doesn't actually produce a useful usage message
    // let mut cmd = Cli::command();
    // eprintln!("{}", cmd.render_usage())
    const USAGE_MSG: &str = r#"-s arg requires piped input, eg. `cat [filename] | cvcap add -s`'

USAGE:
    cvcap add --from stdin --choose-list

For more information try --help"#;

    let out = ColourOutput::new(StreamKind::Stderr);
    out.append("error: ", Style::Error)
        .append(USAGE_MSG, Style::Normal)
        .println()
        .expect("problem styling error text");
}

#[inline(always)]
fn eprint_logged_out(is_quiet: bool) {
    if is_quiet {
        return;
    }

    eprintln!(
        r#"
    You have been logged out of the Checkvist API.
    Please run cvcap again to log back in"#
    );
}

#[inline(always)]
fn eprint_error(err: Error, is_quiet: bool) {
    if is_quiet {
        return;
    }

    let err_msg: String = format!(
        r#"

    If you want to report this, fill out an issue at 
    {}.
    To gather more details that might help solve issue, 
    run the same command again with the '-v' switch,
    and copy the output into the issue.
            "#,
        "https://github.com/crispinb/cvcap/issues"
    );

    let out = ColourOutput::new(StreamKind::Stderr);
    out.append(format!("Error: {}", err), Style::Error)
        .append(err_msg, Style::Normal)
        .println()
        .expect("problem styling error text");
}
